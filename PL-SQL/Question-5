CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/

CREATE TABLE AuditLog (
    audit_id        NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    transaction_id  NUMBER,
    log_time        DATE DEFAULT SYSDATE,
    operation       VARCHAR2(10),
    amount          NUMBER
);

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (
        transaction_id,
        operation,
        amount
    ) VALUES (
        :NEW.TransactionID,
        'INSERT',
        :NEW.Amount
    );
END;
/

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    SELECT Balance INTO v_balance
    FROM Accounts
    WHERE AccountID = :NEW.AccountID;

    IF :NEW.TransactionType = 'WITHDRAWAL' AND :NEW.Amount > v_balance THEN
        RAISE_APPLICATION_ERROR(-20001, 'Withdrawal exceeds available balance.');
    ELSIF :NEW.TransactionType = 'DEPOSIT' AND :NEW.Amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive.');
    END IF;
END;
/
