/*
 * This source file was generated by the Gradle 'init' task
 */
package mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.eq;
import org.mockito.InOrder;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class MyServiceTest {

    @Test
    void testMockingAndStubbing() {
        ExternalApi mockApi = mock(ExternalApi.class);
        when(mockApi.getData()).thenReturn("Mock Data");

        MyService service = new MyService(mockApi);
        assertEquals("Mock Data", service.fetchData());
    }

    @Test
    void testVerifyInteraction() {
        ExternalApi mockApi = mock(ExternalApi.class);

        MyService service = new MyService(mockApi);
        service.fetchData();

        verify(mockApi).getData();
    }

    @Test
    void testArgumentMatching() {
        ExternalApi mockApi = mock(ExternalApi.class);
        when(mockApi.fetchById(anyInt())).thenReturn("matched");

        MyService service = new MyService(mockApi);
        assertEquals("matched", service.fetchWithId(42));

        verify(mockApi).fetchById(eq(42));
    }

    @Test
    void testVoidMethodInteraction() {
        ExternalApi mockApi = mock(ExternalApi.class);
        doNothing().when(mockApi).log("Start");

        MyService service = new MyService(mockApi);
        service.startJob();

        verify(mockApi).log("Start");
    }

    @Test
    void testMultipleReturns() {
        ExternalApi mockApi = mock(ExternalApi.class);
        when(mockApi.getData())
            .thenReturn("First")
            .thenReturn("Second")
            .thenReturn("Third");

        MyService service = new MyService(mockApi);
        assertEquals("First", service.fetchData());
        assertEquals("Second", service.fetchData());
        assertEquals("Third", service.fetchData());
    }

    @Test
    void testInteractionOrder() {
        ExternalApi mockApi = mock(ExternalApi.class);

        MyService service = new MyService(mockApi);
        service.performStepOne();
        service.performStepTwo();

        InOrder inOrder = inOrder(mockApi);
        inOrder.verify(mockApi).log("step1");
        inOrder.verify(mockApi).log("step2");
    }

    @Test
    void testVoidMethodThrowsException() {
        ExternalApi mockApi = mock(ExternalApi.class);
        doThrow(new RuntimeException("Logging failed")).when(mockApi).log("error");

        MyService service = new MyService(mockApi);
        assertThrows(RuntimeException.class, service::logError);
    }
}
